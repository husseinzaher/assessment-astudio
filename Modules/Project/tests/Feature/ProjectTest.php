<?php

namespace Modules\Project\Tests\Feature;

use Modules\Project\Models\Project;
use Modules\User\Models\User;
use PHPUnit\Framework\Attributes\Test;
use Tests\TestCase;

class ProjectTest extends TestCase
{

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $user = User::factory()->create();

        $this->actingAs($user);
    }

    #[Test]
    public function it_can_create_a_project()
    {
        $data = [
            'name' => 'New Project',
            'status' => 'upcoming',
        ];

        $response = $this->postJson('/api/projects', $data);

        $response->assertStatus(200)
            ->assertJsonStructure([
                'status', 'message', 'body' => ['project' => ['id', 'name', 'status', 'createdAt', 'updatedAt']]
            ]);
    }

    #[Test]
    public function it_can_update_a_project()
    {
        $project = Project::factory()->create();
        $data = ['name' => 'Updated Project', 'status' => 'upcoming'];

        $response = $this->putJson("/api/projects/{$project->id}", $data);

        $response->assertStatus(200);
        $this->assertDatabaseHas('projects', ['id' => $project->id, 'name' => 'Updated Project']);
    }

    #[Test]
    public function it_can_delete_a_project()
    {
        $project = Project::factory()->create();

        $response = $this->deleteJson("/api/projects/{$project->id}");

        $response->assertStatus(200);
        $this->assertDatabaseMissing('projects', ['id' => $project->id]);
    }

    #[Test]
    public function it_can_list_projects()
    {
        Project::factory()->count(3)->create();

        $response = $this->getJson('/api/projects');

        $response->assertStatus(200)
            ->assertJsonStructure([
                'status', 'message', 'body' => ['projects' => ['data' => [['id', 'name', 'status', 'createdAt', 'updatedAt']]]]
            ]);
    }

    #[Test]
    public function it_validates_project_creation()
    {
        $response = $this->postJson('/api/projects', []);

        $response->assertStatus(422)->assertJsonValidationErrors(['name', 'status']);
    }
}
